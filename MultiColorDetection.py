{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMG36cV2umy/BUSZwKuPLfO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kurupatividya/COLOR_DETECTION_TRIAL/blob/main/MultiColorDetection.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "qH5JKqUxWOUA",
        "outputId": "8a4f60a8-8dd3-4b7e-ea15-9627dbc3f321"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "error",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-86e6cf041feb>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;31m# converting frame(img == BGR) to HSV(hue-saturation-value)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mhsv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcvtColor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCOLOR_BGR2HSV\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m# red color\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31merror\u001b[0m: OpenCV(4.8.0) /io/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n"
          ]
        }
      ],
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "# capturing video through webcam\n",
        "\n",
        "cap = cv2.VideoCapture(0)\n",
        "\n",
        "while(1):\n",
        "    _, img = cap.read()\n",
        "\n",
        "    # converting frame(img == BGR) to HSV(hue-saturation-value)\n",
        "\n",
        "    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n",
        "\n",
        "    # red color\n",
        "\n",
        "    red_lower = np.array([136,87,111],np.uint8)\n",
        "    red_upper = np.array([180,255,255],np.uint8)\n",
        "\n",
        "    # blue color\n",
        "\n",
        "    blue_lower = np.array([99,115,150],np.uint8)\n",
        "    blue_upper = np.array([110,255,255],np.uint8)\n",
        "\n",
        "    # yellow color\n",
        "\n",
        "    yellow_lower = np.array([22,60,200],np.uint8)\n",
        "    yellow_upper = np.array([60,255,255],np.uint8)\n",
        "\n",
        "    # white color\n",
        "\n",
        "    white_lower = np.array([0,0,200],np.uint8)\n",
        "    white_upper = np.array([180,20,255],np.uint8)\n",
        "\n",
        "    # black color\n",
        "\n",
        "    black_lower = np.array([0,0,0],np.uint8)\n",
        "    black_upper = np.array([180,255,30],np.uint8)\n",
        "\n",
        "    # all color together\n",
        "\n",
        "    red = cv2.inRange(hsv, red_lower, red_upper)\n",
        "    blue = cv2.inRange(hsv, blue_lower, blue_upper)\n",
        "    yellow = cv2.inRange(hsv, yellow_lower, yellow_upper)\n",
        "    white = cv2.inRange(hsv, white_lower, white_upper)\n",
        "    black = cv2.inRange(hsv, black_lower, black_upper)\n",
        "\n",
        "    # Morphological Transform, Dilation\n",
        "\n",
        "    kernal = np.ones((5, 5), \"uint8\")\n",
        "\n",
        "    red = cv2.dilate(red, kernal)\n",
        "    res_red = cv2.bitwise_and(img, img, mask = red)\n",
        "\n",
        "    blue = cv2.dilate(blue, kernal)\n",
        "    res_blue = cv2.bitwise_and(img, img, mask = blue)\n",
        "\n",
        "    yellow = cv2.dilate(yellow, kernal)\n",
        "    res_yellow = cv2.bitwise_and(img, img, mask = yellow)\n",
        "\n",
        "    white = cv2.dilate(white, kernal)\n",
        "    res_white = cv2.bitwise_and(img, img, mask = white)\n",
        "\n",
        "    black = cv2.dilate(black, kernal)\n",
        "    res_black = cv2.bitwise_and(img, img, mask = black)\n",
        "\n",
        "    # Tracking red\n",
        "    (_, contours, hierarchy)=cv2.findContours(red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    for pic, contour in enumerate(contours):\n",
        "        area = cv2.contourArea(contour)\n",
        "        if(area > 300):\n",
        "            x, y, w, h = cv2.boundingRect(contour)\n",
        "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)\n",
        "            cv2.putText(img, \"Red Colour\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255))\n",
        "\n",
        "    # Tracking blue\n",
        "    (_, contours, hierarchy)=cv2.findContours(blue, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    for pic, contour in enumerate(contours):\n",
        "        area = cv2.contourArea(contour)\n",
        "        if(area > 300):\n",
        "            x, y, w, h = cv2.boundingRect(contour)\n",
        "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)\n",
        "            cv2.putText(img, \"Blue Colour\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0))\n",
        "\n",
        "\n",
        "    # Tracking yellow\n",
        "    (_, contours, hierarchy)=cv2.findContours(yellow, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    for pic, contour in enumerate(contours):\n",
        "        area = cv2.contourArea(contour)\n",
        "        if(area > 300):\n",
        "            x, y, w, h = cv2.boundingRect(contour)\n",
        "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)\n",
        "            cv2.putText(img, \"Yellow Colour\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0))\n",
        "\n",
        "    # Tracking white\n",
        "    (_, contours, hierarchy)=cv2.findContours(white, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    for pic, contour in enumerate(contours):\n",
        "        area = cv2.contourArea(contour)\n",
        "        if(area > 300):\n",
        "            x, y, w, h = cv2.boundingRect(contour)\n",
        "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 255, 255), 2)\n",
        "            cv2.putText(img, \"White Colour\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255))\n",
        "\n",
        "    # Tracking black\n",
        "    (_, contours, hierarchy)=cv2.findContours(black, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    for pic, contour in enumerate(contours):\n",
        "        area = cv2.contourArea(contour)\n",
        "        if(area > 300):\n",
        "            x, y, w, h = cv2.boundingRect(contour)\n",
        "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 0), 2)\n",
        "            cv2.putText(img, \"Black Colour\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0))\n",
        "\n",
        "    cv2.imshow(\"Color Tracking\", img)\n",
        "    if cv2.waitKey(10) & 0xFF == ord('q'):\n",
        "        cap.release()\n",
        "        cv2.destroyAllWindows()\n",
        "        break"
      ]
    }
  ]
}